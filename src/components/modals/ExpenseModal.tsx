"use client";

import { useEffect, useActionState, useTransition } from "react";
import { X } from "lucide-react";
import { Expense } from "@/types/expenses.types";
import {
  createExpenseAction,
  updateExpenseAction,
  ExpenseState,
} from "@/lib/actions/expense-actions";
import { translations } from "@/lib/translations";

interface ExpenseModalProps {
  expense?: Expense | null;
  onClose: () => void;
  onSuccess: (expense: Expense, isUpdate: boolean) => void;
}

export default function ExpenseModal({
  onClose,
  expense,
  onSuccess,
}: ExpenseModalProps) {
  const initialState: ExpenseState = { message: null, errors: {} };
  const action = expense ? updateExpenseAction : createExpenseAction;
  const [state, formAction] = useActionState(action, initialState);
  const [isPending, startTransition] = useTransition();

  useEffect(() => {
    if (state?.success) {
      onClose();
    }
  }, [state, onClose]);

  const handleSubmit = (formData: FormData) => {
    startTransition(() => {
      const updatedExpense: Expense = {
        id: expense?.id || 0, // Will be generated by database for new expenses
        type: formData.get("type") as "maintenance" | "works",
        amount: parseFloat(formData.get("amount") as string),
        date: formData.get("date") as string,
        description: formData.get("description") as string,
        category: formData.get("category") as string,
      };
      onSuccess(updatedExpense, !!expense);
      formAction(formData);
    });
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">
            {expense ? "Edit Expense" : translations.modals.registerNewExpense}
          </h2>
          <button
            onClick={onClose}
            disabled={isPending}
            className="text-gray-400 hover:text-gray-600 disabled:opacity-50"
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        <form action={handleSubmit} className="space-y-4">
          {state.message && (
            <div
              className={`text-sm mb-4 ${
                state.message.includes("successfully")
                  ? "text-green-600"
                  : "text-red-500"
              }`}
            >
              {state.message}
            </div>
          )}

          {expense && <input type="hidden" name="id" value={expense.id} />}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              {translations.modals.fundType}
            </label>
            <select
              name="type"
              defaultValue={expense?.type || "maintenance"}
              className="w-full border rounded-sm px-3 py-2"
              required
              disabled={isPending}
            >
              <option value="maintenance">
                {translations.modals.maintenance}
              </option>
              <option value="works">{translations.modals.works}</option>
            </select>
            {state.errors?.type && (
              <div className="text-red-500 text-sm mt-1">
                {state.errors.type}
              </div>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              {translations.modals.amount}
            </label>
            <input
              type="number"
              name="amount"
              defaultValue={expense?.amount || ""}
              className="w-full border rounded-sm px-3 py-2"
              required
              min="0"
              step="1"
              disabled={isPending}
            />
            {state.errors?.amount && (
              <div className="text-red-500 text-sm mt-1">
                {state.errors.amount}
              </div>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              {translations.modals.date}
            </label>
            <input
              type="date"
              name="date"
              defaultValue={expense?.date || ""}
              className="w-full border rounded-sm px-3 py-2"
              required
              disabled={isPending}
            />
            {state.errors?.date && (
              <div className="text-red-500 text-sm mt-1">
                {state.errors.date}
              </div>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              {translations.modals.description}
            </label>
            <input
              type="text"
              name="description"
              defaultValue={expense?.description || ""}
              className="w-full border rounded-sm px-3 py-2"
              placeholder={translations.modals.expenseDescription}
              disabled={isPending}
            />
            {state.errors?.description && (
              <div className="text-red-500 text-sm mt-1">
                {state.errors.description}
              </div>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              {translations.modals.category}
            </label>
            <input
              type="text"
              name="category"
              defaultValue={expense?.category || ""}
              className="w-full border rounded-sm px-3 py-2"
              placeholder={translations.modals.categoryPlaceholder}
              required
              disabled={isPending}
            />
            {state.errors?.category && (
              <div className="text-red-500 text-sm mt-1">
                {state.errors.category}
              </div>
            )}
          </div>

          <div className="flex justify-end gap-3 pt-4">
            <button
              type="button"
              onClick={onClose}
              disabled={isPending}
              className="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50"
            >
              {translations.buttons.cancel}
            </button>
            <button
              type="submit"
              disabled={isPending}
              className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50"
            >
              {isPending
                ? translations.status.processing
                : expense
                ? "Update"
                : translations.buttons.saveExpense}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

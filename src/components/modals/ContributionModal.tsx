"use client";

import { useEffect, useActionState, useTransition } from "react";
import { Lot } from "@/types/lots.types";
import { Contribution } from "@/types/contributions.types";
import {
  createContributionAction,
  updateContributionAction,
  ContributionState,
} from "@/lib/actions/contribution-actions";
import { translations } from "@/lib/translations";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { cn } from "@/lib/utils";

interface ContributionModalProps {
  contribution?: Contribution | null;
  onClose: () => void;
  onSuccess: (contribution: Contribution, isUpdate: boolean) => void;
  lots: Lot[];
  lotsLoading?: boolean;
}

export default function ContributionModal({
  onClose,
  contribution,
  onSuccess,
  lots,
  lotsLoading = false,
}: ContributionModalProps) {
  const initialState: ContributionState = { message: null, errors: {} };
  const action = contribution ? updateContributionAction : createContributionAction;
  const [state, formAction] = useActionState(action, initialState);
  const [isPending, startTransition] = useTransition();

  useEffect(() => {
    if (state?.success) {
      onClose();
    }
  }, [state, onClose]);

  const handleSubmit = (formData: FormData) => {
    startTransition(() => {
      const updatedContribution: Contribution = {
        id: contribution?.id || 0, // Will be generated by database for new contributions
        lotId: formData.get("lotId") as string,
        type: formData.get("type") as "maintenance" | "works",
        amount: parseFloat(formData.get("amount") as string),
        date: new Date(formData.get("date") as string),
        description: formData.get("description") as string,
      };
      onSuccess(updatedContribution, !!contribution);
      formAction(formData);
    });
  };

  return (
    <Dialog open={true} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>
            {contribution ? translations.titles.editContribution : translations.titles.registerContribution}
          </DialogTitle>
        </DialogHeader>

        <form id="contribution-form" action={handleSubmit} className="space-y-4">
          {state.message && (
            <div
              className={cn(
                "text-sm mb-4",
                state.message.includes("successfully")
                  ? "text-emerald-600"
                  : "text-destructive"
              )}
            >
              {state.message}
            </div>
          )}

          {contribution && <input type="hidden" name="id" value={contribution.id} />}
          <div className="space-y-2">
            <Label htmlFor="lotId">{translations.labels.lot}</Label>
            <Select
              name="lotId"
              defaultValue={contribution?.lotId || ""}
              required
              disabled={lotsLoading || isPending}
            >
              <SelectTrigger>
                <SelectValue placeholder={
                  lotsLoading ? translations.status.loading : translations.placeholders.selectLot
                } />
              </SelectTrigger>
              <SelectContent>
                {lots.map((lot) => (
                  <SelectItem key={lot.id} value={lot.id}>
                    {lot.lotNumber} - {lot.owner}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {state.errors?.lotId && (
              <div className="text-destructive text-sm">
                {state.errors.lotId}
              </div>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="type">{translations.messages.fundType}</Label>
            <Select
              name="type"
              defaultValue={contribution?.type || "maintenance"}
              required
              disabled={isPending}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="maintenance">
                  {translations.labels.maintenance}
                </SelectItem>
                <SelectItem value="works">
                  {translations.labels.works}
                </SelectItem>
              </SelectContent>
            </Select>
            {state.errors?.type && (
              <div className="text-destructive text-sm">
                {state.errors.type}
              </div>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="amount">{translations.labels.amount}</Label>
            <Input
              type="number"
              name="amount"
              id="amount"
              defaultValue={contribution?.amount || ""}
              required
              min="0"
              step="1"
              disabled={isPending}
            />
            {state.errors?.amount && (
              <div className="text-destructive text-sm">
                {state.errors.amount}
              </div>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="date">{translations.labels.date}</Label>
            <Input
              type="date"
              name="date"
              id="date"
              defaultValue={contribution?.date ? contribution.date.toISOString().split('T')[0] : ""}
              required
              disabled={isPending}
            />
            {state.errors?.date && (
              <div className="text-destructive text-sm">
                {state.errors.date}
              </div>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">{translations.labels.description}</Label>
            <Input
              type="text"
              name="description"
              id="description"
              defaultValue={contribution?.description || ""}
              placeholder={translations.placeholders.optionalDescription}
              disabled={isPending}
            />
            {state.errors?.description && (
              <div className="text-destructive text-sm">
                {state.errors.description}
              </div>
            )}
          </div>

        </form>
        <DialogFooter>
          <Button
            type="button"
            variant="outline"
            onClick={onClose}
            disabled={isPending}
          >
            {translations.actions.cancel}
          </Button>
          <Button
            type="submit"
            form="contribution-form"
            disabled={isPending}
          >
            {isPending
              ? translations.status.processing
              : contribution
              ? "Update"
              : translations.actions.save}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

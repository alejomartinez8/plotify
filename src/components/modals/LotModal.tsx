"use client";

import { useEffect, useActionState, useTransition } from "react";
import { X } from "lucide-react";
import { Lot } from "@/types/lots.types";
import {
  createLotAction,
  updateLotAction,
  State,
} from "@/lib/actions/lot-actions";
import { translations } from "@/lib/translations";

interface LotModalProps {
  lot?: Lot | null;
  onClose: () => void;
  onSuccess: (lot: Lot, isUpdate: boolean) => void;
}

export default function LotModal({ onClose, lot, onSuccess }: LotModalProps) {
  const initialState: State = { message: null, errors: {} };
  const action = lot ? updateLotAction : createLotAction;
  const [state, formAction] = useActionState(action, initialState);
  const [isPending, startTransition] = useTransition();

  useEffect(() => {
    if (state?.success) {
      onClose();
    }
  }, [state, onClose]);

  const handleSubmit = (formData: FormData) => {
    startTransition(() => {
      const updatedLot: Lot = {
        id: lot?.id || "", // UUID will be generated by database for new lots
        lotNumber: formData.get("lotNumber") as string,
        owner: formData.get("owner") as string,
      };
      onSuccess(updatedLot, !!lot);
      formAction(formData);
    });
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">
            {lot ? translations.modals.editLot : translations.modals.addNewLot}
          </h2>
          <button
            onClick={onClose}
            disabled={isPending}
            className="text-gray-400 hover:text-gray-600 disabled:opacity-50"
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        <form action={handleSubmit} className="space-y-4">
          {state.message && (
            <div
              className={`text-sm mb-4 ${
                state.message.includes("successfully")
                  ? "text-green-600"
                  : "text-red-500"
              }`}
            >
              {state.message}
            </div>
          )}

          {lot && <input type="hidden" name="id" value={lot.id} />}

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              {translations.modals.lotId}
            </label>
            <input
              type="text"
              name="lotNumber"
              defaultValue={lot?.lotNumber || ""}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
              disabled={isPending}
              placeholder={translations.modals.lotIdPlaceholder}
            />
            {state.errors?.lotNumber && (
              <div className="text-red-500 text-sm mt-1">
                {state.errors.lotNumber}
              </div>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              {translations.modals.ownerName}
            </label>
            <input
              type="text"
              name="owner"
              defaultValue={lot?.owner || ""}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
              disabled={isPending}
              placeholder={translations.modals.ownerNamePlaceholder}
            />
            {state.errors?.owner && (
              <div className="text-red-500 text-sm mt-1">
                {state.errors.owner}
              </div>
            )}
          </div>

          <div className="flex justify-end gap-3 pt-4">
            <button
              type="button"
              onClick={onClose}
              disabled={isPending}
              className="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50"
            >
              {translations.buttons.cancel}
            </button>
            <button
              type="submit"
              disabled={isPending}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
            >
              {isPending
                ? translations.status.processing
                : lot
                ? translations.modals.update
                : translations.modals.create}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

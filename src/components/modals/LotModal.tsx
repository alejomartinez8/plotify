"use client";

import { useEffect, useActionState, useTransition } from "react";
import { Lot } from "@/types/lots.types";
import {
  createLotAction,
  updateLotAction,
  State,
} from "@/lib/actions/lot-actions";
import { translations } from "@/lib/translations";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/Dialog";
import { Button } from "@/components/ui/Button";
import { Input } from "@/components/ui/Input";
import { Label } from "@/components/ui/Label";
import { cn } from "@/lib/utils";

interface LotModalProps {
  lot?: Lot | null;
  onClose: () => void;
  onSuccess: (lot: Lot, isUpdate: boolean) => void;
}

export default function LotModal({ onClose, lot, onSuccess }: LotModalProps) {
  const initialState: State = { message: null, errors: {} };
  const action = lot ? updateLotAction : createLotAction;
  const [state, formAction] = useActionState(action, initialState);
  const [isPending, startTransition] = useTransition();

  useEffect(() => {
    if (state?.success) {
      onClose();
    }
  }, [state, onClose]);

  const handleSubmit = (formData: FormData) => {
    startTransition(() => {
      const updatedLot: Lot = {
        id: lot?.id || "", // UUID will be generated by database for new lots
        lotNumber: formData.get("lotNumber") as string,
        owner: formData.get("owner") as string,
        initialWorksDebt: parseInt(formData.get("initialWorksDebt") as string) || 0,
        isExempt: formData.get("isExempt") === "on",
        exemptionReason: formData.get("exemptionReason") as string || null,
      };
      onSuccess(updatedLot, !!lot);
      formAction(formData);
    });
  };

  return (
    <Dialog open={true} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            {lot ? translations.titles.editLot : translations.titles.newLot}
          </DialogTitle>
        </DialogHeader>

        <form id="lot-form" action={handleSubmit} className="space-y-4">
          {state.message && (
            <div
              className={cn(
                "mb-4 text-sm",
                state.message.includes("successfully")
                  ? "text-emerald-600"
                  : "text-destructive"
              )}
            >
              {state.message}
            </div>
          )}

          {lot && <input type="hidden" name="id" value={lot.id} />}

          <div className="space-y-2">
            <Label htmlFor="lotNumber">{translations.labels.lot}</Label>
            <Input
              type="text"
              name="lotNumber"
              id="lotNumber"
              defaultValue={lot?.lotNumber || ""}
              required
              disabled={isPending}
              placeholder={translations.placeholders.lotIdExample}
            />
            {state.errors?.lotNumber && (
              <div className="text-destructive text-sm">
                {state.errors.lotNumber}
              </div>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="owner">{translations.labels.owner}</Label>
            <Input
              type="text"
              name="owner"
              id="owner"
              defaultValue={lot?.owner || ""}
              required
              disabled={isPending}
              placeholder={translations.placeholders.ownerName}
            />
            {state.errors?.owner && (
              <div className="text-destructive text-sm">
                {state.errors.owner}
              </div>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="initialWorksDebt">Deuda Inicial Obras (2024)</Label>
            <Input
              type="number"
              name="initialWorksDebt"
              id="initialWorksDebt"
              defaultValue={lot?.initialWorksDebt || 0}
              min="0"
              disabled={isPending}
              placeholder="0"
            />
            <p className="text-xs text-gray-600">
              Deuda inicial de obras del a침o 2024 para este lote
            </p>
            {state.errors?.initialWorksDebt && (
              <div className="text-destructive text-sm">
                {state.errors.initialWorksDebt}
              </div>
            )}
          </div>

          {/* Exemption Fields */}
          <div className="border-t pt-4 space-y-4">
            <h4 className="text-sm font-semibold text-gray-700">
              {translations.labels.exemption}
            </h4>
            
            <div className="flex items-center space-x-3">
              <input
                type="checkbox"
                name="isExempt"
                id="isExempt"
                defaultChecked={lot?.isExempt || false}
                disabled={isPending}
                className="h-4 w-4 text-amber-600 border-gray-300 rounded focus:ring-amber-500"
              />
              <Label htmlFor="isExempt" className="text-sm font-medium">
                {translations.labels.exemptLot}
              </Label>
            </div>

            <div className="space-y-2">
              <Label htmlFor="exemptionReason">{translations.labels.exemptionReason}</Label>
              <Input
                type="text"
                name="exemptionReason"
                id="exemptionReason"
                defaultValue={lot?.exemptionReason || ""}
                disabled={isPending}
                placeholder="Ej: Etapa 2, Negociaci칩n pendiente, etc."
              />
              <p className="text-xs text-gray-600">
                Raz칩n por la cual este lote no debe computar en c치lculos de deuda (opcional)
              </p>
            </div>
          </div>
        </form>
        <DialogFooter>
          <Button
            type="button"
            variant="outline"
            onClick={onClose}
            disabled={isPending}
          >
            {translations.actions.cancel}
          </Button>
          <Button type="submit" form="lot-form" disabled={isPending}>
            {isPending
              ? translations.status.processing
              : lot
                ? translations.actions.update
                : translations.actions.create}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

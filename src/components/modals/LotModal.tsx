"use client";

import { useEffect, useActionState, useTransition } from "react";
import { Lot } from "@/types/lots.types";
import {
  createLotAction,
  updateLotAction,
  State,
} from "@/lib/actions/lot-actions";
import { translations } from "@/lib/translations";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/Dialog";
import { Button } from "@/components/ui/Button";
import { Input } from "@/components/ui/Input";
import { Label } from "@/components/ui/Label";
import { cn } from "@/lib/utils";

interface LotModalProps {
  lot?: Lot | null;
  onClose: () => void;
  onSuccess: (lot: Lot, isUpdate: boolean) => void;
}

export default function LotModal({ onClose, lot, onSuccess }: LotModalProps) {
  const initialState: State = { message: null, errors: {} };
  const action = lot ? updateLotAction : createLotAction;
  const [state, formAction] = useActionState(action, initialState);
  const [isPending, startTransition] = useTransition();

  useEffect(() => {
    if (state?.success) {
      onClose();
    }
  }, [state, onClose]);

  const handleSubmit = (formData: FormData) => {
    startTransition(() => {
      const updatedLot: Lot = {
        id: lot?.id || "", // UUID will be generated by database for new lots
        lotNumber: formData.get("lotNumber") as string,
        owner: formData.get("owner") as string,
      };
      onSuccess(updatedLot, !!lot);
      formAction(formData);
    });
  };

  return (
    <Dialog open={true} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            {lot ? translations.titles.editLot : translations.titles.newLot}
          </DialogTitle>
        </DialogHeader>

        <form id="lot-form" action={handleSubmit} className="space-y-4">
          {state.message && (
            <div
              className={cn(
                "mb-4 text-sm",
                state.message.includes("successfully")
                  ? "text-emerald-600"
                  : "text-destructive"
              )}
            >
              {state.message}
            </div>
          )}

          {lot && <input type="hidden" name="id" value={lot.id} />}

          <div className="space-y-2">
            <Label htmlFor="lotNumber">{translations.labels.lot}</Label>
            <Input
              type="text"
              name="lotNumber"
              id="lotNumber"
              defaultValue={lot?.lotNumber || ""}
              required
              disabled={isPending}
              placeholder={translations.placeholders.lotIdExample}
            />
            {state.errors?.lotNumber && (
              <div className="text-destructive text-sm">
                {state.errors.lotNumber}
              </div>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="owner">{translations.labels.owner}</Label>
            <Input
              type="text"
              name="owner"
              id="owner"
              defaultValue={lot?.owner || ""}
              required
              disabled={isPending}
              placeholder={translations.placeholders.ownerName}
            />
            {state.errors?.owner && (
              <div className="text-destructive text-sm">
                {state.errors.owner}
              </div>
            )}
          </div>
        </form>
        <DialogFooter>
          <Button
            type="button"
            variant="outline"
            onClick={onClose}
            disabled={isPending}
          >
            {translations.actions.cancel}
          </Button>
          <Button type="submit" form="lot-form" disabled={isPending}>
            {isPending
              ? translations.status.processing
              : lot
                ? translations.actions.update
                : translations.actions.create}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

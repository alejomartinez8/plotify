# Cline Configuration for Plotify

## Coding Standards

- **Language**: All code, comments, documentation, and commit messages must be in English
- **Variables & Functions**: Use English names for variables, functions, classes, and files
- **Error Messages**: All error messages and logs in English
- **Documentation**: All .md files, inline docs, and code comments in English
- **Git**: Commit messages, branch names, and PR descriptions in English
- **User Interface**: Initial development in English (i18n will handle translations for end-users)

## Development Workflow

- Cline helps write and review code changes
- All code follows TypeScript and ESLint standards
- Vercel automatically deploys from main branch
- Database migrations must be reviewed by Cline before execution

## React/Next.js Component Guidelines

- **Server Components First**: Always prefer Server Components over Client Components
- **Client Components Only When Necessary**: Use Client Components (`'use client'`) only when:
  - Interactive features require browser APIs (onClick, onChange, useState, useEffect)
  - Using browser-only APIs (localStorage, window, document)
  - Using state management or event handlers
  - Third-party libraries that require client-side execution
- **Next.js 15.3.5 & React 19.1.0**: Leverage latest server component capabilities
- **Performance**: Server Components reduce bundle size and improve initial page load
- **SEO Benefits**: Server-rendered content improves search engine optimization
- **Default Assumption**: All components are Server Components unless explicitly marked with `'use client'`

## Modern React Hooks Best Practices

### `useTransition` - For Responsive UI

```javascript
const [isPending, startTransition] = useTransition();

// Use for operations that shouldn't block UI
startTransition(async () => {
  await serverAction();
});
```

**When to use**: Server calls, heavy computations, non-urgent updates
**Benefit**: UI remains responsive during operations

### `useOptimistic` - For Instant Feedback

```javascript
const [optimisticData, updateOptimistic] = useOptimistic(
  serverData,
  (state, action) => applyOptimisticUpdate(state, action)
);

// Updates UI immediately, reverts if server action fails
updateOptimistic(newData);
await serverAction();
```

**When to use**: CRUD operations, list updates, user feedback
**Benefit**: Instant UI updates with automatic rollback on failure

### `useActionState` - For Form Handling

```javascript
const [state, formAction] = useActionState(serverAction, initialState);

// Connects forms directly to Server Actions
<form action={formAction}>
  <input name="field" />
  {state.errors?.field && <span>{state.errors.field[0]}</span>}
</form>;
```

**When to use**: Forms with server validation, progressive enhancement
**Benefit**: Simplified form state management with built-in error handling

### Hook Combination Patterns

```javascript
// Complete CRUD operation with modern hooks
const [isPending, startTransition] = useTransition();
const [optimisticItems, deleteOptimisticItem] = useOptimistic(items, reducer);
const [formState, formAction] = useActionState(createAction, initialState);

const handleDelete = (item) => {
  startTransition(async () => {
    deleteOptimisticItem(item.id);
    await deleteAction(item.id);
  });
};
```

### Server Actions Standards

```javascript
// Always include proper error handling and revalidation
export async function createItemAction(
  prevState: State,
  formData: FormData
): Promise<State> {
  // 1. Validate with Zod
  const validated = schema.safeParse(Object.fromEntries(formData));

  if (!validated.success) {
    return {
      errors: validated.error.flatten().fieldErrors,
      message: "Validation failed",
    };
  }

  try {
    // 2. Database operation
    await createItem(validated.data);

    // 3. Revalidate cache
    revalidatePath("/items");

    // 4. Success response
    return { message: "Item created successfully", errors: {} };
  } catch (error) {
    return { message: "Database error", errors: {} };
  }
}
```

## Database Migrations

Prisma migrations should:

- Use descriptive names with timestamps
- Be reviewed by Cline before execution
- Follow Prisma migration conventions
- Include proper rollback considerations
- Example: `20240101000000_create_users_table`

## Token Optimization

### Division of Responsibilities

- **Cline**: Focus on creating/modifying files only
- **User**: Execute all CLI commands (npm install, npx, git, etc.)
- **Cline**: Provide specific CLI commands to execute
- **User**: Confirm execution with minimal feedback (✅/❌ + brief description)

### Communication Efficiency

- Use specific, direct prompts
- Group related tasks in single requests
- Batch related files when logical
- Use established abbreviations (i18n, CRUD, etc.)
- Avoid redundant explanations of known concepts

### Standard Communication Format

```
Task: [concise description]
Files: [list of files to create/modify]
CLI Commands: [commands for user to execute]
Status: [✅/❌ + brief description]
Next: [next step]
```

### Confirmation Protocol

- ✅ Success: Brief confirmation only
- ❌ Error: Error message + specific issue
- No need for command output unless error occurs
- No need to use read commands (cat, ls) - Cline has file access

## Security Restrictions

DO NOT read or modify:

- .env files
- Any file containing API keys or credentials
- Database connection strings
- Authentication secrets

# Dependencies

node_modules/
\*\*/node_modules/
.pnp
.pnp.js

# Build outputs

/build/
/dist/
/.next/
/out/

# Testing

/coverage/

# Environment variables

.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Large data files

_.csv
_.xlsx
